digraph "classes" {
rankdir=BT
charset="utf-8"
"discopy.grammar.cfg.Algebra" [color="black", fontcolor="black", label="{Algebra|cod\ldom\l|}", shape="record", style="solid"];
"discopy.quantum.gates.AntiConjugate" [color="black", fontcolor="black", label="{AntiConjugate|\l|conjugate()\lrotate(left)\l}", shape="record", style="solid"];
"discopy.cat.Arrow" [color="black", fontcolor="black", label="{Arrow|cod\ldom\lfree_symbols\linside\lty_factory\l|bubble(): Bubble\ldagger(): Arrow\lfrom_tree(tree: dict): Arrow\lid(dom: Optional[Ob]): Arrow\llambdify(): Callable\lsubs(): Arrow\lthen(): Arrow\lto_tree(): dict\lzero(dom, cod)\l}", shape="record", style="solid"];
"discopy.cat.AxiomError" [color="black", fontcolor="red", label="{AxiomError|\l|}", shape="record", style="solid"];
"discopy.grammar.categorial.BA" [color="black", fontcolor="black", label="{BA|under\l|}", shape="record", style="solid"];
"discopy.grammar.categorial.BC" [color="black", fontcolor="black", label="{BC|\l|}", shape="record", style="solid"];
"discopy.grammar.categorial.BX" [color="black", fontcolor="black", label="{BX|\l|}", shape="record", style="solid"];
"discopy.matrix.Backend" [color="black", fontcolor="black", label="{Backend|array\lmodule\l|}", shape="record", style="solid"];
"discopy.drawing.legacy.Backend" [color="black", fontcolor="black", label="{Backend|max_width : int\l|draw_node(i, j)\ldraw_polygon()\ldraw_spiders(graph, positions, draw_box_labels)\ldraw_text(text, i, j)\ldraw_wire(source, target, bend_out, bend_in, style)\loutput(path, show)\l}", shape="record", style="solid"];
"discopy.utils.BinaryBoxConstructor" [color="black", fontcolor="black", label="{BinaryBoxConstructor|left\lright\l|from_tree(tree: dict): BinaryBoxConstructor\lto_tree(): dict\l}", shape="record", style="solid"];
"discopy.pivotal.Box" [color="black", fontcolor="black", label="{Box|is_conjugate\l|dagger(): Box\lrotate(left)\lto_drawing()\l}", shape="record", style="solid"];
"discopy.monoidal.Box" [color="black", fontcolor="black", label="{Box|bubble_closing\lbubble_opening\lcolor : str\ldraw_as_spider : bool\ldraw_as_wires : bool\ldrawing_name : str\l|to_drawing(): Box\l}", shape="record", style="solid"];
"discopy.braided.Box" [color="black", fontcolor="black", label="{Box|\l|}", shape="record", style="solid"];
"discopy.symmetric.Box" [color="black", fontcolor="black", label="{Box|\l|}", shape="record", style="solid"];
"discopy.cat.Box" [color="black", fontcolor="black", label="{Box|data : NoneType\lfree_symbols\lis_dagger : bool\lname\l|dagger(): Box\lfrom_tree(tree: dict): Box\llambdify(): Callable\lsubs(): Box\lto_tree(): dict\l}", shape="record", style="solid"];
"discopy.ribbon.Box" [color="black", fontcolor="black", label="{Box|\l|}", shape="record", style="solid"];
"discopy.compact.Box" [color="black", fontcolor="black", label="{Box|\l|}", shape="record", style="solid"];
"discopy.frobenius.Box" [color="black", fontcolor="black", label="{Box|\l|}", shape="record", style="solid"];
"discopy.tensor.Box" [color="black", fontcolor="black", label="{Box|array\l|grad(var)\l}", shape="record", style="solid"];
"discopy.cartesian.Box" [color="black", fontcolor="black", label="{Box|\l|}", shape="record", style="solid"];
"discopy.balanced.Box" [color="black", fontcolor="black", label="{Box|\l|}", shape="record", style="solid"];
"discopy.traced.Box" [color="black", fontcolor="black", label="{Box|\l|}", shape="record", style="solid"];
"discopy.closed.Box" [color="black", fontcolor="black", label="{Box|\l|}", shape="record", style="solid"];
"discopy.rigid.Box" [color="black", fontcolor="black", label="{Box|is_transpose\lz : int\l|rotate(left)\lto_drawing()\l}", shape="record", style="solid"];
"discopy.grammar.pregroup.Box" [color="black", fontcolor="black", label="{Box|rotate\l|}", shape="record", style="solid"];
"discopy.grammar.categorial.Box" [color="black", fontcolor="black", label="{Box|\l|}", shape="record", style="solid"];
"discopy.quantum.zx.Box" [color="black", fontcolor="black", label="{Box|\l|}", shape="record", style="solid"];
"discopy.quantum.circuit.Box" [color="black", fontcolor="black", label="{Box|array\lis_classical : bool\lis_mixed\l|dagger()\lgrad(var)\lrotate(left)\l}", shape="record", style="solid"];
"discopy.quantum.gates.Bra" [color="black", fontcolor="black", label="{Bra|array\lbitstring\ldraw_as_brakets : bool\lto_drawing\l|dagger()\l}", shape="record", style="solid"];
"discopy.braided.Braid" [color="black", fontcolor="black", label="{Braid|\l|dagger()\l}", shape="record", style="solid"];
"discopy.ribbon.Braid" [color="black", fontcolor="black", label="{Braid|z : int\l|rotate(left)\l}", shape="record", style="solid"];
"discopy.balanced.Braid" [color="black", fontcolor="black", label="{Braid|\l|}", shape="record", style="solid"];
"discopy.monoidal.Bubble" [color="black", fontcolor="black", label="{Bubble|drawing_name\l|to_drawing()\l}", shape="record", style="solid"];
"discopy.cat.Bubble" [color="black", fontcolor="black", label="{Bubble|arg\lfree_symbols\lis_id_on_objects\l|from_tree(tree)\lto_tree()\l}", shape="record", style="solid"];
"discopy.tensor.Bubble" [color="black", fontcolor="black", label="{Bubble|func\l|grad(var)\l}", shape="record", style="solid"];
"discopy.matrix.Matrix.__class_getitem__.C" [color="black", fontcolor="black", label="{C|\l|}", shape="record", style="solid"];
"discopy.utils.NamedGeneric.__class_getitem__.Result.__class_getitem__.C" [color="black", fontcolor="black", label="{C|\l|}", shape="record", style="solid"];
"discopy.quantum.channel.CQ" [color="black", fontcolor="black", label="{CQ|classical\ll\lquantum\lr\l|tensor()\lto_dim(): Dim\l}", shape="record", style="solid"];
"discopy.quantum.gates.CRx" [color="black", fontcolor="black", label="{CRx|controlled\l|}", shape="record", style="solid"];
"discopy.quantum.gates.CRz" [color="black", fontcolor="black", label="{CRz|controlled\l|}", shape="record", style="solid"];
"discopy.quantum.gates.CU1" [color="black", fontcolor="black", label="{CU1|controlled\l|}", shape="record", style="solid"];
"discopy.pivotal.Cap" [color="black", fontcolor="black", label="{Cap|\l|dagger(): Cup\l}", shape="record", style="solid"];
"discopy.ribbon.Cap" [color="black", fontcolor="black", label="{Cap|\l|}", shape="record", style="solid"];
"discopy.compact.Cap" [color="black", fontcolor="black", label="{Cap|\l|}", shape="record", style="solid"];
"discopy.frobenius.Cap" [color="black", fontcolor="black", label="{Cap|\l|}", shape="record", style="solid"];
"discopy.tensor.Cap" [color="black", fontcolor="black", label="{Cap|\l|}", shape="record", style="solid"];
"discopy.rigid.Cap" [color="black", fontcolor="black", label="{Cap|\l|dagger()\lrotate(left)\l}", shape="record", style="solid"];
"discopy.grammar.pregroup.Cap" [color="black", fontcolor="black", label="{Cap|\l|}", shape="record", style="solid"];
"discopy.pivotal.Category" [color="black", fontcolor="black", label="{Category|ar\lob\l|}", shape="record", style="solid"];
"discopy.monoidal.Category" [color="black", fontcolor="black", label="{Category|ar\lob\l|}", shape="record", style="solid"];
"discopy.braided.Category" [color="black", fontcolor="black", label="{Category|ar\lob\l|}", shape="record", style="solid"];
"discopy.symmetric.Category" [color="black", fontcolor="black", label="{Category|ar\lob\l|}", shape="record", style="solid"];
"discopy.cat.Category" [color="black", fontcolor="black", label="{Category|ar\lar\lob\lob\l|}", shape="record", style="solid"];
"discopy.ribbon.Category" [color="black", fontcolor="black", label="{Category|ar\lob\l|}", shape="record", style="solid"];
"discopy.compact.Category" [color="black", fontcolor="black", label="{Category|ar\lob\l|}", shape="record", style="solid"];
"discopy.frobenius.Category" [color="black", fontcolor="black", label="{Category|ar\lob\l|}", shape="record", style="solid"];
"discopy.cartesian.Category" [color="black", fontcolor="black", label="{Category|ar\lob\l|}", shape="record", style="solid"];
"discopy.balanced.Category" [color="black", fontcolor="black", label="{Category|ar\lob\l|}", shape="record", style="solid"];
"discopy.traced.Category" [color="black", fontcolor="black", label="{Category|ar\lob\l|}", shape="record", style="solid"];
"discopy.rigid.Category" [color="black", fontcolor="black", label="{Category|ar\lob\l|}", shape="record", style="solid"];
"discopy.grammar.pregroup.Category" [color="black", fontcolor="black", label="{Category|ar\lob\l|}", shape="record", style="solid"];
"discopy.drawing.grid.Cell" [color="black", fontcolor="black", label="{Cell|label : Optional[discopy.monoidal.Ty \| discopy.monoidal.Box]\lstart : int\lstop : int\l|}", shape="record", style="solid"];
"discopy.quantum.channel.Channel" [color="black", fontcolor="black", label="{Channel|cod\ldom\ldtype : complex\l|cups(left, right)\ldagger(): Channel\ldiscard(dom: CQ): Channel\ldouble(quantum: Tensor): Channel\lencode(dim: Dim, constructive): Channel\lid(dom): Channel\lmeasure(dim: Dim, destructive): Channel\lsingle(classical: Tensor): Channel\lswap(left, right): Channel\ltensor(other: Channel): Channel\lthen(other: Channel): Channel\lto_tensor(): Tensor\l}", shape="record", style="solid"];
"discopy.quantum.circuit.Circuit" [color="black", fontcolor="black", label="{Circuit|is_mixed\lty_factory\l|apply_controlled(gate: Circuit): Circuit\lcup_factory(left, right)\ldraw()\leval()\lfrom_tk()\lget_counts()\lgrad(var)\lid(dom: int | Ty)\linit_and_discard()\ljacobian(variables)\lmeasure(mixed)\lpermutation(perm, dom)\lspider_factory(n_legs_in, n_legs_out, typ, phase)\lto_pennylane(probabilities, backend_config, diff_method)\lto_tk()\lto_tn(mixed)\l}", shape="record", style="solid"];
"discopy.quantum.tk.Circuit" [color="black", fontcolor="black", label="{Circuit|n_bits\lpost_processing\lpost_selection : dict\lscalar : int\l|add_bit(unit, offset)\lget_counts()\lpost_process(process)\lpost_select(post_selection)\lrename_units(renaming)\lscale(number)\lupgrade(tk_circuit)\l}", shape="record", style="solid"];
"discopy.quantum.gates.ClassicalGate" [color="black", fontcolor="black", label="{ClassicalGate|is_classical : bool\lis_mixed : bool\l|}", shape="record", style="solid"];
"discopy.cat.Composable" [color="black", fontcolor="black", label="{Composable|cod : T\ldom : T\lfactory : Type[Composable]\lsum_factory : Type[Composable]\lty_factory : Type[T]\l|is_composable(other: Composable): bool\lis_parallel(other: Composable): bool\lthen(other: Optional[Composable[T]]): Composable[T]\l}", shape="record", style="solid"];
"discopy.grammar.categorial.unaryBoxConstructor.Constructor" [color="black", fontcolor="black", label="{Constructor|\l|from_tree(tree)\lto_tree()\l}", shape="record", style="solid"];
"discopy.quantum.gates.Controlled" [color="black", fontcolor="black", label="{Controlled|array\lcontrolled\ldistance : int\ldraw_as_controlled : bool\ll\lphase\lr\l|conjugate()\ldagger()\lgrad(var)\llambdify()\lsubs()\lto_drawing()\l}", shape="record", style="solid"];
"discopy.quantum.gates.ControlledRotation" [color="black", fontcolor="black", label="{ControlledRotation|lambdify\lsubs\l|}", shape="record", style="solid"];
"discopy.cartesian.Copy" [color="black", fontcolor="black", label="{Copy|\l|}", shape="record", style="solid"];
"discopy.quantum.gates.Copy" [color="black", fontcolor="black", label="{Copy|color : str\ldraw_as_spider : bool\ldrawing_name : str\l|dagger()\l}", shape="record", style="solid"];
"discopy.pivotal.Cup" [color="black", fontcolor="black", label="{Cup|\l|dagger(): Cap\l}", shape="record", style="solid"];
"discopy.ribbon.Cup" [color="black", fontcolor="black", label="{Cup|\l|}", shape="record", style="solid"];
"discopy.compact.Cup" [color="black", fontcolor="black", label="{Cup|\l|}", shape="record", style="solid"];
"discopy.frobenius.Cup" [color="black", fontcolor="black", label="{Cup|\l|}", shape="record", style="solid"];
"discopy.rigid.Cup" [color="black", fontcolor="black", label="{Cup|\l|dagger()\lrotate(left)\l}", shape="record", style="solid"];
"discopy.grammar.pregroup.Cup" [color="black", fontcolor="black", label="{Cup|\l|}", shape="record", style="solid"];
"discopy.closed.Curry" [color="black", fontcolor="black", label="{Curry|arg\lleft : bool\ln : int\l|}", shape="record", style="solid"];
"discopy.grammar.categorial.Curry" [color="black", fontcolor="black", label="{Curry|\l|}", shape="record", style="solid"];
"discopy.tensor.DTyped" [color="black", fontcolor="black", label="{DTyped|\l|}", shape="record", style="solid"];
"discopy.pivotal.Diagram" [color="black", fontcolor="black", label="{Diagram|ty_factory\l|conjugate()\ldagger()\ltrace_factory(diagram: Diagram, left)\l}", shape="record", style="solid"];
"discopy.monoidal.Diagram" [color="black", fontcolor="black", label="{Diagram|boxes\llayer_factory\loffsets\lty_factory\lwidth\l|decode(dom: Ty, boxes_and_offsets: list[tuple[Box, int]], boxes: list[Box], offsets: list[int], cod: Ty): Diagram\ldepth()\lencode(): tuple[Ty, list[tuple[Box, int]]]\lfoliation()\lfrom_tree(tree)\linterchange(i: int, j: int, left): Diagram\lnormal_form(): Diagram\lnormalize(left): Iterator[Diagram]\ltensor(other: Diagram): Diagram\lto_drawing()\lto_staircases()\l}", shape="record", style="solid"];
"discopy.interaction.Diagram" [color="black", fontcolor="black", label="{Diagram|boxes\lcod\ldom\linside\lnatural\lto_drawing\ltrace\ltrace_factory : classmethod\ltranspose\l|braid(left: Ty, right: Ty): Diagram\lcaps(left: Ty, right: Ty): Diagram\lcups(left: Ty, right: Ty): Diagram\ldagger()\ldraw()\lid(dom: Ty): Diagram\lnaturality(i: int, left, down, braid): Diagram\lsimplify()\ltensor(other)\lthen(other: Diagram)\l}", shape="record", style="solid"];
"discopy.braided.Diagram" [color="black", fontcolor="black", label="{Diagram|\l|braid(left: monoidal.Ty, right: monoidal.Ty): Diagram\lnaturality(i: int, left, down, braid): Diagram\lsimplify(): Diagram\l}", shape="record", style="solid"];
"discopy.symmetric.Diagram" [color="black", fontcolor="black", label="{Diagram|twist_factory : classmethod\l|depth()\lpermutation(xs: list[int], dom: monoidal.Ty): Diagram\lpermute(): Diagram\lsimplify()\lswap(left: monoidal.Ty, right: monoidal.Ty): Diagram\lto_hypergraph(): Hypergraph\l}", shape="record", style="solid"];
"discopy.ribbon.Diagram" [color="black", fontcolor="black", label="{Diagram|\l|cup(x, y)\lto_ribbons()\ltrace(n, left)\l}", shape="record", style="solid"];
"discopy.compact.Diagram" [color="black", fontcolor="black", label="{Diagram|ty_factory\l|}", shape="record", style="solid"];
"discopy.frobenius.Diagram" [color="black", fontcolor="black", label="{Diagram|ty_factory\l|caps(left, right)\lspiders(n_legs_in: int, n_legs_out: int, typ: Ty, phases): Diagram\lunfuse(): Diagram\l}", shape="record", style="solid"];
"discopy.tensor.Diagram" [color="black", fontcolor="black", label="{Diagram|ty_factory\l|eval(contractor: Callable, dtype: type): Tensor\lgrad(var)\ljacobian(variables): Diagram\lto_tn(dtype: type): tuple[list['tensornetwork.Node'], list['tensornetwork.Edge']]\l}", shape="record", style="solid"];
"discopy.cartesian.Diagram" [color="black", fontcolor="black", label="{Diagram|\l|copy(x: monoidal.Ty, n): Diagram\l}", shape="record", style="solid"];
"discopy.balanced.Diagram" [color="black", fontcolor="black", label="{Diagram|\l|to_braided()\ltwist(dom: monoidal.Ty): Diagram\l}", shape="record", style="solid"];
"discopy.traced.Diagram" [color="black", fontcolor="black", label="{Diagram|\l|trace(n, left)\l}", shape="record", style="solid"];
"discopy.closed.Diagram" [color="black", fontcolor="black", label="{Diagram|ty_factory\l|curry(n, left): Diagram\lev(base: Ty, exponent: Ty, left): Eval\luncurry(left): Diagram\l}", shape="record", style="solid"];
"discopy.rigid.Diagram" [color="black", fontcolor="black", label="{Diagram|l\llayer_factory\lnormalize\lover : staticmethod\lr\lty_factory\lunder : staticmethod\l|caps(left: Ty, right: Ty): Diagram\lcups(left: Ty, right: Ty): Diagram\lcurry(n, left): Diagram\lev(base: Ty, exponent: Ty, left): Diagram\lnormal_form()\lrotate(left)\lsnake_removal(left): Iterator[Diagram]\ltranspose(left)\ltranspose_box(i, j, left)\l}", shape="record", style="solid"];
"discopy.grammar.pregroup.Diagram" [color="black", fontcolor="black", label="{Diagram|caps : classmethod\lcups : classmethod\lty_factory\l|ba(left, right)\lbc(left, middle, right)\lbx(left, middle, right)\lfa(left, right)\lfc(left, middle, right)\lfx(left, middle, right)\lnormal_form()\l}", shape="record", style="solid"];
"discopy.grammar.categorial.Diagram" [color="black", fontcolor="black", label="{Diagram|\l|ba(left, right)\lbc(left, middle, right)\lbx(left, middle, right)\lfa(left, right)\lfc(left, middle, right)\lfx(left, middle, right)\lto_pregroup()\l}", shape="record", style="solid"];
"discopy.quantum.zx.Diagram" [color="black", fontcolor="black", label="{Diagram|ty_factory\l|cup_factory(left, right)\lfrom_pyzx(graph)\lgrad(var): rigid.Sum\lpermutation(perm, dom)\lswap(left, right)\lto_pyzx()\l}", shape="record", style="solid"];
"discopy.python.Dict" [color="black", fontcolor="black", label="{Dict|cod : int\ldom : int\linside : dict[int, int]\l|copy(x: int, n): Dict\lid(x: int)\lswap(x: int, y: int): Dict\ltensor(other: Dict): Dict\lthen(other: Dict): Dict\l}", shape="record", style="solid"];
"discopy.quantum.circuit.Digit" [color="black", fontcolor="black", label="{Digit|\l|}", shape="record", style="solid"];
"discopy.quantum.gates.Digits" [color="black", fontcolor="black", label="{Digits|array\lbitstring\ldigits\ldim\ldraw_as_brakets : bool\l|dagger()\lto_drawing()\l}", shape="record", style="solid"];
"discopy.frobenius.Dim" [color="black", fontcolor="black", label="{Dim|l\lob_factory : int\lr\l|}", shape="record", style="solid"];
"discopy.quantum.gates.Discard" [color="black", fontcolor="black", label="{Discard|draw_as_discards : bool\ln_qubits\l|dagger()\l}", shape="record", style="solid"];
"discopy.ribbon.Diagram.to_ribbons.DualRail" [color="black", fontcolor="black", label="{DualRail|\l|}", shape="record", style="solid"];
"discopy.balanced.Diagram.to_braided.DualRail" [color="black", fontcolor="black", label="{DualRail|cod\l|}", shape="record", style="solid"];
"discopy.quantum.gates.Encode" [color="black", fontcolor="black", label="{Encode|constructive : bool\ldraw_as_measures : bool\ln_bits : int\lreset_bits : bool\l|dagger()\l}", shape="record", style="solid"];
"discopy.drawing.legacy.Equation" [color="black", fontcolor="black", label="{Equation|space : int\lsymbol : str\lterms : tuple\l|draw(path, space)\l}", shape="record", style="solid"];
"discopy.closed.Eval" [color="black", fontcolor="black", label="{Eval|base\lexponent\lleft\l|}", shape="record", style="solid"];
"discopy.grammar.categorial.Eval" [color="black", fontcolor="black", label="{Eval|\l|}", shape="record", style="solid"];
"discopy.closed.Exp" [color="black", fontcolor="black", label="{Exp|base\lexponent\lleft\lright\l|from_tree(tree)\lto_tree()\l}", shape="record", style="solid"];
"discopy.grammar.categorial.FA" [color="black", fontcolor="black", label="{FA|over\l|}", shape="record", style="solid"];
"discopy.grammar.categorial.FC" [color="black", fontcolor="black", label="{FC|\l|}", shape="record", style="solid"];
"discopy.grammar.categorial.FX" [color="black", fontcolor="black", label="{FX|\l|}", shape="record", style="solid"];
"discopy.python.Function" [color="black", fontcolor="black", label="{Function|braid\lcod : tuple\ldom : tuple\lexp : staticmethod\linside : Callable\lover : staticmethod\lunder : staticmethod\l|copy(x: Ty, n): Function\lcurry(n, left): Function\ldiscard(dom: Ty): Function\lev(base: Ty, exponent: Ty, left): Function\lfix(n): Function\lid(): Function\lswap(x: Ty, y: Ty): Function\ltensor(other: Function): Function\lthen(other: Function): Function\ltrace(n, left)\luncurry(left): Function\l}", shape="record", style="solid"];
"discopy.pivotal.Functor" [color="black", fontcolor="black", label="{Functor|cod\ldom\l|}", shape="record", style="solid"];
"discopy.monoidal.Functor" [color="black", fontcolor="black", label="{Functor|cod\ldom\l|}", shape="record", style="solid"];
"discopy.braided.Functor" [color="black", fontcolor="black", label="{Functor|cod\ldom\l|}", shape="record", style="solid"];
"discopy.symmetric.Functor" [color="black", fontcolor="black", label="{Functor|cod\ldom\l|}", shape="record", style="solid"];
"discopy.cat.Functor" [color="black", fontcolor="black", label="{Functor|ar : MappingOrCallable[Box, Arrow]\lcod\lcod\ldom\ldom\lob : MappingOrCallable[Ob, Ob]\l|id(dom: Category): Functor\lthen(other: Functor): Functor\l}", shape="record", style="solid"];
"discopy.ribbon.Functor" [color="black", fontcolor="black", label="{Functor|cod\ldom\l|}", shape="record", style="solid"];
"discopy.compact.Functor" [color="black", fontcolor="black", label="{Functor|cod\ldom\l|}", shape="record", style="solid"];
"discopy.frobenius.Functor" [color="black", fontcolor="black", label="{Functor|cod\ldom\l|}", shape="record", style="solid"];
"discopy.tensor.Functor" [color="black", fontcolor="black", label="{Functor|cod\ldom\ldtype : type\l|}", shape="record", style="solid"];
"discopy.cartesian.Functor" [color="black", fontcolor="black", label="{Functor|cod\ldom\l|}", shape="record", style="solid"];
"discopy.balanced.Functor" [color="black", fontcolor="black", label="{Functor|cod\ldom\l|}", shape="record", style="solid"];
"discopy.traced.Functor" [color="black", fontcolor="black", label="{Functor|cod\ldom\l|}", shape="record", style="solid"];
"discopy.closed.Functor" [color="black", fontcolor="black", label="{Functor|cod : Category\ldom : Category\l|}", shape="record", style="solid"];
"discopy.rigid.Functor" [color="black", fontcolor="black", label="{Functor|cod\ldom\l|}", shape="record", style="solid"];
"discopy.grammar.pregroup.Functor" [color="black", fontcolor="black", label="{Functor|cod\ldom\l|}", shape="record", style="solid"];
"discopy.grammar.categorial.Functor" [color="black", fontcolor="black", label="{Functor|cod : Category\ldom : Category\l|}", shape="record", style="solid"];
"discopy.quantum.circuit.Functor" [color="black", fontcolor="black", label="{Functor|cod\ldom\l|}", shape="record", style="solid"];
"discopy.quantum.channel.Functor" [color="black", fontcolor="black", label="{Functor|cod\ldom\l|}", shape="record", style="solid"];
"discopy.drawing.grid.Grid" [color="black", fontcolor="black", label="{Grid|max\lmin\lrows : list[list[Cell]]\l|from_diagram(diagram: discopy.monoidal.Diagram): Grid\lto_ascii(_debug): str\lto_html(): lxml.etree.ElementTree\l}", shape="record", style="solid"];
"discopy.symmetric.Hypergraph" [color="black", fontcolor="black", label="{Hypergraph|category\l|}", shape="record", style="solid"];
"discopy.compact.Hypergraph" [color="black", fontcolor="black", label="{Hypergraph|category\l|}", shape="record", style="solid"];
"discopy.frobenius.Hypergraph" [color="black", fontcolor="black", label="{Hypergraph|category\l|}", shape="record", style="solid"];
"discopy.hypergraph.Hypergraph" [color="black", fontcolor="black", label="{Hypergraph|bijection\lbox_wires\lboxes\lbraid\lcap_factory : classmethod\lcategory\lcod\lcup_factory : classmethod\ldom\lis_bijective\lis_monogamous\lis_progressive\ll\ln_spiders\lports\lr\lscalar_spiders\lspider_types : tuple\ltwist\lwires : tuple\l|caps(left, right)\lcups(left, right)\ldagger()\ldepth()\ldraw(seed, k, path)\lfrom_box(box: Box): Hypergraph\lfrom_diagram(old: Diagram): Hypergraph\lid(dom): Hypergraph\linterchange(i: int, j: int): Hypergraph\lmake_bijective()\lmake_monogamous()\lmake_progressive()\lrotate(left)\lsimplify()\lspiders(n_legs_in, n_legs_out, typ)\lspring_layout(seed, k)\lswap(left, right)\ltensor(other)\lthen(other)\lto_diagram()\lto_graph()\ltrace(n, left)\ltrace_factory(arg: Hypergraph, left)\ltranspose(left)\l}", shape="record", style="solid"];
"discopy.grammar.cfg.Id" [color="black", fontcolor="black", label="{Id|cod\ldom\l|}", shape="record", style="solid"];
"discopy.matrix.JAX" [color="black", fontcolor="black", label="{JAX|\l|}", shape="record", style="solid"];
"discopy.quantum.gates.Ket" [color="black", fontcolor="black", label="{Ket|array\lbitstring\ldraw_as_brakets : bool\lto_drawing\l|dagger()\l}", shape="record", style="solid"];
"discopy.monoidal.Layer" [color="black", fontcolor="black", label="{Layer|boxes_and_offsets\lboxes_or_types : tuple\lfree_symbols\l|cast(box: Box): Layer\ldagger(): Layer\lfrom_tree(tree: dict): Layer\llambdify()\lmerge(other: Layer): Layer\lsubs(): Layer\lto_drawing(): Diagram\lto_tree(): dict\l}", shape="record", style="solid"];
"discopy.rigid.Layer" [color="black", fontcolor="black", label="{Layer|l\lr\l|rotate(left)\l}", shape="record", style="solid"];
"discopy.utils.MappingOrCallable" [color="black", fontcolor="black", label="{MappingOrCallable|mapping : MappingOrCallable[KT, VT]\l|then(other: MappingOrCallable[VT, V2T]): MappingOrCallable[KT, V2T]\l}", shape="record", style="solid"];
"discopy.drawing.legacy.MatBackend" [color="black", fontcolor="black", label="{MatBackend|axis\llinewidth : int\l|draw_node(i, j)\ldraw_polygon()\ldraw_spiders(graph, positions, draw_box_labels)\ldraw_text(text, i, j)\ldraw_wire(source, target, bend_out, bend_in, style)\loutput(path, show)\l}", shape="record", style="solid"];
"discopy.monoidal.Match" [color="black", fontcolor="black", label="{Match|above\lbelow\lleft\lright\l|subs(target: Diagram): Diagram\l}", shape="record", style="solid"];
"discopy.quantum.gates.Match" [color="black", fontcolor="black", label="{Match|color : str\ldraw_as_spider : bool\ldrawing_name : str\l|dagger()\l}", shape="record", style="solid"];
"discopy.matrix.Matrix" [color="black", fontcolor="black", label="{Matrix|array\lbraid\lcod\ldom\ldtype : NoneType\ltwist\l|basis(x: int, i: int): Matrix\lcast(dtype: type): Matrix\lconjugate(): Matrix\lcopy(x: int, n: int): Matrix\ldagger(): Matrix\ldiscard(x: int): Matrix\lgrad(var): Matrix\lid(dom): Matrix\lis_close(other: Matrix, rtol, atol): bool\llambdify(): Callable\lmap(func: Callable[[dtype], dtype], dtype): Matrix\lmerge(x: int, n: int): Matrix\lones(x: int): Matrix\lrepeat(): Matrix\lround(decimals): Matrix\lsubs(): Matrix\lswap(left: int, right: int): Matrix\ltensor(other: Matrix)\lthen(other: Matrix): Matrix\ltrace(n, left): Matrix\ltranspose(): Matrix\lzero(dom: int, cod: int): Matrix\l}", shape="record", style="solid"];
"discopy.quantum.gates.Measure" [color="black", fontcolor="black", label="{Measure|destructive : bool\ldraw_as_measures : bool\ldraw_as_measures : bool\ln_qubits : int\loverride_bits : bool\l|dagger()\l}", shape="record", style="solid"];
"discopy.quantum.gates.MixedScalar" [color="black", fontcolor="black", label="{MixedScalar|\l|}", shape="record", style="solid"];
"discopy.quantum.gates.MixedState" [color="black", fontcolor="black", label="{MixedState|color : str\ldraw_as_discards : bool\ldraw_as_spider : bool\ldrawing_name : str\l|dagger()\l}", shape="record", style="solid"];
"discopy.utils.NamedGeneric" [color="black", fontcolor="black", label="{NamedGeneric|\l|}", shape="record", style="solid"];
"discopy.drawing.legacy.Node" [color="black", fontcolor="black", label="{Node|data : dict\lkind\l|}", shape="record", style="solid"];
"discopy.matrix.NumPy" [color="black", fontcolor="black", label="{NumPy|\l|}", shape="record", style="solid"];
"discopy.pivotal.Ob" [color="black", fontcolor="black", label="{Ob|l\lr\l|}", shape="record", style="solid"];
"discopy.cat.Ob" [color="black", fontcolor="black", label="{Ob|always_draw_label\lname : str\l|from_tree(tree: dict): Ob\lto_tree(): dict\l}", shape="record", style="solid"];
"discopy.frobenius.Ob" [color="black", fontcolor="black", label="{Ob|l\lr\l|}", shape="record", style="solid"];
"discopy.rigid.Ob" [color="black", fontcolor="black", label="{Ob|l\lr\lz : int\l|from_tree(tree)\lto_tree()\l}", shape="record", style="solid"];
"discopy.quantum.circuit.Ob" [color="black", fontcolor="black", label="{Ob|dim : int\l|}", shape="record", style="solid"];
"discopy.grammar.cfg.Operad" [color="black", fontcolor="black", label="{Operad|ar\lob\l|}", shape="record", style="solid"];
"discopy.closed.Over" [color="black", fontcolor="black", label="{Over|\l|}", shape="record", style="solid"];
"discopy.monoidal.PRO" [color="black", fontcolor="black", label="{PRO|inside\ln : int\l|from_tree(tree)\ltensor(): PRO\lto_drawing()\lto_tree()\l}", shape="record", style="solid"];
"discopy.rigid.PRO" [color="black", fontcolor="black", label="{PRO|l\lr\l|}", shape="record", style="solid"];
"discopy.quantum.gates.Parametrized" [color="black", fontcolor="black", label="{Parametrized|drawing_name\lmodules\l|lambdify()\lsubs()\l}", shape="record", style="solid"];
"discopy.quantum.pennylane.PennyLaneCircuit" [color="black", fontcolor="black", label="{PennyLaneCircuit|diff_method\l|contains_sympy()\ldraw()\leval()\lget_device(backend_config)\lget_valid_states()\linitialise_concrete_params(symbols, weights)\linitialise_device_and_circuit()\lmake_circuit()\lparam_substitution(symbols, weights)\lpost_selected_circuit(params)\l}", shape="record", style="solid"];
"discopy.matrix.PyTorch" [color="black", fontcolor="black", label="{PyTorch|\l|}", shape="record", style="solid"];
"discopy.quantum.gates.QuantumGate" [color="black", fontcolor="black", label="{QuantumGate|is_classical : bool\lis_mixed : bool\l|}", shape="record", style="solid"];
"discopy.quantum.circuit.Qudit" [color="black", fontcolor="black", label="{Qudit|\l|}", shape="record", style="solid"];
"discopy.utils.NamedGeneric.__class_getitem__.Result" [color="black", fontcolor="black", label="{Result|\l|}", shape="record", style="solid"];
"discopy.quantum.gates.Rotation" [color="black", fontcolor="black", label="{Rotation|n_qubits : int\lphase\l|dagger()\lgrad(var)\lrotate(left)\l}", shape="record", style="solid"];
"discopy.grammar.cfg.Rule" [color="black", fontcolor="black", label="{Rule|\l|to_diagram(): discopy.monoidal.Box\l}", shape="record", style="solid"];
"discopy.grammar.thue.Rule" [color="black", fontcolor="black", label="{Rule|\l|}", shape="record", style="solid"];
"discopy.quantum.gates.Rx" [color="black", fontcolor="black", label="{Rx|array\l|}", shape="record", style="solid"];
"discopy.quantum.gates.Ry" [color="black", fontcolor="black", label="{Ry|array\l|}", shape="record", style="solid"];
"discopy.quantum.gates.Rz" [color="black", fontcolor="black", label="{Rz|array\l|}", shape="record", style="solid"];
"discopy.quantum.zx.Scalar" [color="black", fontcolor="black", label="{Scalar|drawing_name\l|dagger()\lgrad(var)\lsubs()\l}", shape="record", style="solid"];
"discopy.quantum.gates.Scalar" [color="black", fontcolor="black", label="{Scalar|array\ldrawing_name\l|dagger()\lgrad(var)\l}", shape="record", style="solid"];
"discopy.quantum.gates.SelfConjugate" [color="black", fontcolor="black", label="{SelfConjugate|\l|conjugate()\lrotate(left)\l}", shape="record", style="solid"];
"discopy.frobenius.Spider" [color="black", fontcolor="black", label="{Spider|color : str\ldraw_as_spider : bool\ldrawing_name : str\lphase\ltyp\l|dagger()\lrotate(left)\lunfuse(): Diagram\l}", shape="record", style="solid"];
"discopy.tensor.Spider" [color="black", fontcolor="black", label="{Spider|\l|}", shape="record", style="solid"];
"discopy.grammar.pregroup.Spider" [color="black", fontcolor="black", label="{Spider|\l|rotate(left)\l}", shape="record", style="solid"];
"discopy.quantum.zx.Spider" [color="black", fontcolor="black", label="{Spider|array\lname\l|dagger()\lgrad(var)\lrotate(left)\lsubs()\l}", shape="record", style="solid"];
"discopy.quantum.gates.Sqrt" [color="black", fontcolor="black", label="{Sqrt|array\ldrawing_name\l|dagger()\l}", shape="record", style="solid"];
"discopy.monoidal.Sum" [color="black", fontcolor="black", label="{Sum|\l|draw()\ltensor(other)\l}", shape="record", style="solid"];
"discopy.cat.Sum" [color="black", fontcolor="black", label="{Sum|free_symbols\lterms : tuple[Arrow, ...]\l|dagger()\lfrom_tree(tree)\llambdify()\lsubs()\lthen(other)\lto_tree()\l}", shape="record", style="solid"];
"discopy.tensor.Sum" [color="black", fontcolor="black", label="{Sum|\l|}", shape="record", style="solid"];
"discopy.rigid.Sum" [color="black", fontcolor="black", label="{Sum|\l|rotate(left): Sum\l}", shape="record", style="solid"];
"discopy.quantum.circuit.Sum" [color="black", fontcolor="black", label="{Sum|is_mixed\l|eval(backend, mixed)\lget_counts(backend)\lgrad(var)\lto_tk()\l}", shape="record", style="solid"];
"discopy.symmetric.Swap" [color="black", fontcolor="black", label="{Swap|\l|dagger()\l}", shape="record", style="solid"];
"discopy.compact.Swap" [color="black", fontcolor="black", label="{Swap|\l|}", shape="record", style="solid"];
"discopy.frobenius.Swap" [color="black", fontcolor="black", label="{Swap|\l|}", shape="record", style="solid"];
"discopy.tensor.Swap" [color="black", fontcolor="black", label="{Swap|\l|}", shape="record", style="solid"];
"discopy.cartesian.Swap" [color="black", fontcolor="black", label="{Swap|\l|}", shape="record", style="solid"];
"discopy.grammar.pregroup.Swap" [color="black", fontcolor="black", label="{Swap|\l|}", shape="record", style="solid"];
"discopy.quantum.zx.Swap" [color="black", fontcolor="black", label="{Swap|\l|}", shape="record", style="solid"];
"discopy.quantum.circuit.Swap" [color="black", fontcolor="black", label="{Swap|array\lis_classical\lis_mixed\l|}", shape="record", style="solid"];
"discopy.tensor.Tensor" [color="black", fontcolor="black", label="{Tensor|array\lcod\ldom\ll\lr\l|caps(left: Dim, right: Dim): Tensor\lconjugate(diagrammatic): Tensor\lcup_factory(left: Dim, right: Dim): Tensor\lcups(left: Dim, right: Dim): Tensor\ldagger(): Tensor\lid(dom): Tensor\ljacobian(): Tensor\lspider_factory(n_legs_in: int, n_legs_out: int, typ: Dim, phase): Tensor\lspiders(n_legs_in: int, n_legs_out: int, typ: Dim, phase): Tensor\lswap(left: Dim, right: Dim): Tensor\ltensor(other: Tensor): Tensor\lthen(other: Tensor): Tensor\ltranspose(left): Tensor\lzero(dom: Dim, cod: Dim): Tensor\l}", shape="record", style="solid"];
"discopy.matrix.TensorFlow" [color="black", fontcolor="black", label="{TensorFlow|\l|}", shape="record", style="solid"];
"discopy.drawing.legacy.TikzBackend" [color="black", fontcolor="black", label="{TikzBackend|edge_styles : list\ledgelayer : list\lnode_styles : list\lnodelayer : list\lnodes : dict\luse_tikzstyles : NoneType, bool\l|add_node(i, j, text, options)\ldraw_node(i, j, text)\ldraw_polygon()\ldraw_spiders(graph, positions, draw_box_labels)\ldraw_text(text, i, j)\ldraw_wire(source, target, bend_out, bend_in, style)\lformat_color(color)\loutput(path, show)\l}", shape="record", style="solid"];
"discopy.traced.Trace" [color="black", fontcolor="black", label="{Trace|left : bool\l|dagger()\lto_drawing()\l}", shape="record", style="solid"];
"discopy.grammar.cfg.Tree" [color="black", fontcolor="black", label="{Tree|branches : tuple\lcod\lroot\lty_factory\l|from_nltk(tree: nltk.Tree, lexicalised, word_types): Tree\lid(dom)\lto_diagram(contravariant): discopy.monoidal.Diagram\l}", shape="record", style="solid"];
"discopy.ribbon.Twist" [color="black", fontcolor="black", label="{Twist|z : int\l|rotate(left)\l}", shape="record", style="solid"];
"discopy.balanced.Twist" [color="black", fontcolor="black", label="{Twist|\l|dagger()\l}", shape="record", style="solid"];
"discopy.pivotal.Ty" [color="black", fontcolor="black", label="{Ty|ob_factory\l|}", shape="record", style="solid"];
"discopy.monoidal.Ty" [color="black", fontcolor="black", label="{Ty|inside : tuple\lis_atomic\lob_factory\l|count(obj: cat.Ob): int\lfrom_tree(tree)\ltensor(): Ty\lto_drawing(): Ty\lto_tree()\l}", shape="record", style="solid"];
"discopy.interaction.Ty" [color="black", fontcolor="black", label="{Ty|l\lnatural\lnegative\lpositive\lr\l|tensor()\l}", shape="record", style="solid"];
"discopy.frobenius.Ty" [color="black", fontcolor="black", label="{Ty|ob_factory\l|}", shape="record", style="solid"];
"discopy.closed.Ty" [color="black", fontcolor="black", label="{Ty|is_exp\lis_over\lis_under\lleft\lright\l|}", shape="record", style="solid"];
"discopy.rigid.Ty" [color="black", fontcolor="black", label="{Ty|l\lob_factory\lr\lz\l|assert_isadjoint(other)\l}", shape="record", style="solid"];
"discopy.grammar.pregroup.Ty" [color="black", fontcolor="black", label="{Ty|\l|assert_isadjoint(other)\l}", shape="record", style="solid"];
"discopy.quantum.circuit.Ty" [color="black", fontcolor="black", label="{Ty|ob_factory\l|}", shape="record", style="solid"];
"discopy.quantum.gates.U1" [color="black", fontcolor="black", label="{U1|array\l|}", shape="record", style="solid"];
"discopy.closed.Under" [color="black", fontcolor="black", label="{Under|\l|}", shape="record", style="solid"];
"discopy.monoidal.Whiskerable" [color="black", fontcolor="black", label="{Whiskerable|\l|id(dom: any): Whiskerable\ltensor(other: Whiskerable): Whiskerable\lwhisker(other: any): Whiskerable\l}", shape="record", style="solid"];
"discopy.drawing.grid.Wire" [color="black", fontcolor="black", label="{Wire|\l|}", shape="record", style="solid"];
"discopy.grammar.pregroup.Word" [color="black", fontcolor="black", label="{Word|\l|}", shape="record", style="solid"];
"discopy.grammar.cfg.Word" [color="black", fontcolor="black", label="{Word|\l|}", shape="record", style="solid"];
"discopy.grammar.categorial.Word" [color="black", fontcolor="black", label="{Word|\l|}", shape="record", style="solid"];
"discopy.grammar.thue.Word" [color="black", fontcolor="black", label="{Word|\l|}", shape="record", style="solid"];
"discopy.quantum.zx.X" [color="black", fontcolor="black", label="{X|color : str\ltikzstyle_name : str\l|}", shape="record", style="solid"];
"discopy.quantum.zx.Y" [color="black", fontcolor="black", label="{Y|color : str\ltikzstyle_name : str\l|}", shape="record", style="solid"];
"discopy.quantum.zx.Z" [color="black", fontcolor="black", label="{Z|color : str\ltikzstyle_name : str\l|}", shape="record", style="solid"];
"discopy.balanced.Box" -> "discopy.balanced.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.balanced.Box" -> "discopy.braided.Box" [arrowhead="empty", arrowtail="none"];
"discopy.balanced.Braid" -> "discopy.balanced.Box" [arrowhead="empty", arrowtail="none"];
"discopy.balanced.Braid" -> "discopy.braided.Braid" [arrowhead="empty", arrowtail="none"];
"discopy.balanced.Category" -> "discopy.braided.Category" [arrowhead="empty", arrowtail="none"];
"discopy.balanced.Diagram" -> "discopy.braided.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.balanced.Diagram.to_braided.DualRail" -> "discopy.balanced.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.balanced.Functor" -> "discopy.braided.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.balanced.Twist" -> "discopy.balanced.Box" [arrowhead="empty", arrowtail="none"];
"discopy.braided.Box" -> "discopy.braided.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.braided.Box" -> "discopy.monoidal.Box" [arrowhead="empty", arrowtail="none"];
"discopy.braided.Braid" -> "discopy.braided.Box" [arrowhead="empty", arrowtail="none"];
"discopy.braided.Braid" -> "discopy.utils.BinaryBoxConstructor" [arrowhead="empty", arrowtail="none"];
"discopy.braided.Category" -> "discopy.monoidal.Category" [arrowhead="empty", arrowtail="none"];
"discopy.braided.Diagram" -> "discopy.monoidal.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.braided.Functor" -> "discopy.monoidal.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.cartesian.Box" -> "discopy.cartesian.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.cartesian.Box" -> "discopy.symmetric.Box" [arrowhead="empty", arrowtail="none"];
"discopy.cartesian.Category" -> "discopy.symmetric.Category" [arrowhead="empty", arrowtail="none"];
"discopy.cartesian.Copy" -> "discopy.cartesian.Box" [arrowhead="empty", arrowtail="none"];
"discopy.cartesian.Diagram" -> "discopy.symmetric.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.cartesian.Functor" -> "discopy.symmetric.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.cartesian.Swap" -> "discopy.cartesian.Box" [arrowhead="empty", arrowtail="none"];
"discopy.cartesian.Swap" -> "discopy.symmetric.Swap" [arrowhead="empty", arrowtail="none"];
"discopy.cat.Arrow" -> "discopy.cat.Composable" [arrowhead="empty", arrowtail="none"];
"discopy.cat.Box" -> "discopy.cat.Arrow" [arrowhead="empty", arrowtail="none"];
"discopy.cat.Bubble" -> "discopy.cat.Box" [arrowhead="empty", arrowtail="none"];
"discopy.cat.Functor" -> "discopy.cat.Composable" [arrowhead="empty", arrowtail="none"];
"discopy.cat.Sum" -> "discopy.cat.Box" [arrowhead="empty", arrowtail="none"];
"discopy.closed.Box" -> "discopy.closed.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.closed.Box" -> "discopy.monoidal.Box" [arrowhead="empty", arrowtail="none"];
"discopy.closed.Curry" -> "discopy.closed.Box" [arrowhead="empty", arrowtail="none"];
"discopy.closed.Curry" -> "discopy.monoidal.Bubble" [arrowhead="empty", arrowtail="none"];
"discopy.closed.Diagram" -> "discopy.monoidal.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.closed.Eval" -> "discopy.closed.Box" [arrowhead="empty", arrowtail="none"];
"discopy.closed.Exp" -> "discopy.cat.Ob" [arrowhead="empty", arrowtail="none"];
"discopy.closed.Exp" -> "discopy.closed.Ty" [arrowhead="empty", arrowtail="none"];
"discopy.closed.Functor" -> "discopy.monoidal.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.closed.Over" -> "discopy.closed.Exp" [arrowhead="empty", arrowtail="none"];
"discopy.closed.Ty" -> "discopy.monoidal.Ty" [arrowhead="empty", arrowtail="none"];
"discopy.closed.Under" -> "discopy.closed.Exp" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Box" -> "discopy.compact.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Box" -> "discopy.ribbon.Box" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Box" -> "discopy.symmetric.Box" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Cap" -> "discopy.compact.Box" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Cap" -> "discopy.ribbon.Cap" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Category" -> "discopy.ribbon.Category" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Category" -> "discopy.symmetric.Category" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Cup" -> "discopy.compact.Box" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Cup" -> "discopy.ribbon.Cup" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Diagram" -> "discopy.ribbon.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Diagram" -> "discopy.symmetric.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Functor" -> "discopy.ribbon.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Functor" -> "discopy.symmetric.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Hypergraph" -> "discopy.hypergraph.Hypergraph" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Swap" -> "discopy.compact.Box" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Swap" -> "discopy.ribbon.Braid" [arrowhead="empty", arrowtail="none"];
"discopy.compact.Swap" -> "discopy.symmetric.Swap" [arrowhead="empty", arrowtail="none"];
"discopy.drawing.grid.Wire" -> "discopy.drawing.grid.Cell" [arrowhead="empty", arrowtail="none"];
"discopy.drawing.legacy.MatBackend" -> "discopy.drawing.legacy.Backend" [arrowhead="empty", arrowtail="none"];
"discopy.drawing.legacy.TikzBackend" -> "discopy.drawing.legacy.Backend" [arrowhead="empty", arrowtail="none"];
"discopy.frobenius.Box" -> "discopy.compact.Box" [arrowhead="empty", arrowtail="none"];
"discopy.frobenius.Box" -> "discopy.frobenius.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.frobenius.Cap" -> "discopy.compact.Cap" [arrowhead="empty", arrowtail="none"];
"discopy.frobenius.Cap" -> "discopy.frobenius.Box" [arrowhead="empty", arrowtail="none"];
"discopy.frobenius.Category" -> "discopy.compact.Category" [arrowhead="empty", arrowtail="none"];
"discopy.frobenius.Cup" -> "discopy.compact.Cup" [arrowhead="empty", arrowtail="none"];
"discopy.frobenius.Cup" -> "discopy.frobenius.Box" [arrowhead="empty", arrowtail="none"];
"discopy.frobenius.Diagram" -> "discopy.compact.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.frobenius.Dim" -> "discopy.frobenius.Ty" [arrowhead="empty", arrowtail="none"];
"discopy.frobenius.Functor" -> "discopy.compact.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.frobenius.Hypergraph" -> "discopy.hypergraph.Hypergraph" [arrowhead="empty", arrowtail="none"];
"discopy.frobenius.Ob" -> "discopy.pivotal.Ob" [arrowhead="empty", arrowtail="none"];
"discopy.frobenius.Spider" -> "discopy.frobenius.Box" [arrowhead="empty", arrowtail="none"];
"discopy.frobenius.Swap" -> "discopy.compact.Swap" [arrowhead="empty", arrowtail="none"];
"discopy.frobenius.Swap" -> "discopy.frobenius.Box" [arrowhead="empty", arrowtail="none"];
"discopy.frobenius.Ty" -> "discopy.pivotal.Ty" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.BA" -> "discopy.grammar.categorial.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.BA" -> "discopy.grammar.categorial.unaryBoxConstructor.Constructor" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.BC" -> "discopy.grammar.categorial.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.BC" -> "discopy.utils.BinaryBoxConstructor" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.BX" -> "discopy.grammar.categorial.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.BX" -> "discopy.utils.BinaryBoxConstructor" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.Box" -> "discopy.closed.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.Box" -> "discopy.grammar.categorial.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.Curry" -> "discopy.closed.Curry" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.Curry" -> "discopy.grammar.categorial.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.Diagram" -> "discopy.closed.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.Eval" -> "discopy.closed.Eval" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.Eval" -> "discopy.grammar.categorial.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.FA" -> "discopy.grammar.categorial.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.FA" -> "discopy.grammar.categorial.unaryBoxConstructor.Constructor" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.FC" -> "discopy.grammar.categorial.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.FC" -> "discopy.utils.BinaryBoxConstructor" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.FX" -> "discopy.grammar.categorial.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.FX" -> "discopy.utils.BinaryBoxConstructor" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.Functor" -> "discopy.closed.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.Word" -> "discopy.grammar.categorial.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.categorial.Word" -> "discopy.grammar.thue.Word" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.cfg.Algebra" -> "discopy.cat.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.cfg.Id" -> "discopy.grammar.cfg.Rule" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.cfg.Operad" -> "discopy.cat.Category" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.cfg.Rule" -> "discopy.grammar.cfg.Tree" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.cfg.Rule" -> "discopy.grammar.thue.Rule" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.cfg.Word" -> "discopy.grammar.cfg.Rule" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.cfg.Word" -> "discopy.grammar.thue.Word" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.pregroup.Box" -> "discopy.frobenius.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.pregroup.Box" -> "discopy.grammar.pregroup.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.pregroup.Cap" -> "discopy.frobenius.Cap" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.pregroup.Cap" -> "discopy.grammar.pregroup.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.pregroup.Category" -> "discopy.frobenius.Category" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.pregroup.Cup" -> "discopy.frobenius.Cup" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.pregroup.Cup" -> "discopy.grammar.pregroup.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.pregroup.Diagram" -> "discopy.frobenius.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.pregroup.Functor" -> "discopy.frobenius.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.pregroup.Spider" -> "discopy.frobenius.Spider" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.pregroup.Spider" -> "discopy.grammar.pregroup.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.pregroup.Swap" -> "discopy.frobenius.Swap" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.pregroup.Swap" -> "discopy.grammar.pregroup.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.pregroup.Ty" -> "discopy.rigid.Ty" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.pregroup.Word" -> "discopy.grammar.pregroup.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.pregroup.Word" -> "discopy.grammar.thue.Word" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.thue.Rule" -> "discopy.monoidal.Box" [arrowhead="empty", arrowtail="none"];
"discopy.grammar.thue.Word" -> "discopy.grammar.thue.Rule" [arrowhead="empty", arrowtail="none"];
"discopy.hypergraph.Hypergraph" -> "discopy.cat.Composable" [arrowhead="empty", arrowtail="none"];
"discopy.hypergraph.Hypergraph" -> "discopy.monoidal.Whiskerable" [arrowhead="empty", arrowtail="none"];
"discopy.hypergraph.Hypergraph" -> "discopy.utils.NamedGeneric.__class_getitem__.Result" [arrowhead="empty", arrowtail="none"];
"discopy.interaction.Diagram" -> "discopy.cat.Composable" [arrowhead="empty", arrowtail="none"];
"discopy.interaction.Diagram" -> "discopy.monoidal.Whiskerable" [arrowhead="empty", arrowtail="none"];
"discopy.interaction.Diagram" -> "discopy.utils.NamedGeneric.__class_getitem__.Result" [arrowhead="empty", arrowtail="none"];
"discopy.interaction.Ty" -> "discopy.utils.NamedGeneric.__class_getitem__.Result" [arrowhead="empty", arrowtail="none"];
"discopy.matrix.JAX" -> "discopy.matrix.Backend" [arrowhead="empty", arrowtail="none"];
"discopy.matrix.Matrix" -> "discopy.cat.Composable" [arrowhead="empty", arrowtail="none"];
"discopy.matrix.Matrix" -> "discopy.monoidal.Whiskerable" [arrowhead="empty", arrowtail="none"];
"discopy.matrix.Matrix" -> "discopy.utils.NamedGeneric.__class_getitem__.Result" [arrowhead="empty", arrowtail="none"];
"discopy.matrix.NumPy" -> "discopy.matrix.Backend" [arrowhead="empty", arrowtail="none"];
"discopy.matrix.PyTorch" -> "discopy.matrix.Backend" [arrowhead="empty", arrowtail="none"];
"discopy.matrix.TensorFlow" -> "discopy.matrix.Backend" [arrowhead="empty", arrowtail="none"];
"discopy.monoidal.Box" -> "discopy.cat.Box" [arrowhead="empty", arrowtail="none"];
"discopy.monoidal.Box" -> "discopy.monoidal.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.monoidal.Bubble" -> "discopy.cat.Bubble" [arrowhead="empty", arrowtail="none"];
"discopy.monoidal.Bubble" -> "discopy.monoidal.Box" [arrowhead="empty", arrowtail="none"];
"discopy.monoidal.Category" -> "discopy.cat.Category" [arrowhead="empty", arrowtail="none"];
"discopy.monoidal.Diagram" -> "discopy.cat.Arrow" [arrowhead="empty", arrowtail="none"];
"discopy.monoidal.Diagram" -> "discopy.monoidal.Whiskerable" [arrowhead="empty", arrowtail="none"];
"discopy.monoidal.Functor" -> "discopy.cat.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.monoidal.Layer" -> "discopy.cat.Box" [arrowhead="empty", arrowtail="none"];
"discopy.monoidal.PRO" -> "discopy.monoidal.Ty" [arrowhead="empty", arrowtail="none"];
"discopy.monoidal.Sum" -> "discopy.cat.Sum" [arrowhead="empty", arrowtail="none"];
"discopy.monoidal.Sum" -> "discopy.monoidal.Box" [arrowhead="empty", arrowtail="none"];
"discopy.monoidal.Ty" -> "discopy.cat.Ob" [arrowhead="empty", arrowtail="none"];
"discopy.pivotal.Box" -> "discopy.pivotal.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.pivotal.Box" -> "discopy.rigid.Box" [arrowhead="empty", arrowtail="none"];
"discopy.pivotal.Cap" -> "discopy.pivotal.Box" [arrowhead="empty", arrowtail="none"];
"discopy.pivotal.Cap" -> "discopy.rigid.Cap" [arrowhead="empty", arrowtail="none"];
"discopy.pivotal.Category" -> "discopy.rigid.Category" [arrowhead="empty", arrowtail="none"];
"discopy.pivotal.Cup" -> "discopy.pivotal.Box" [arrowhead="empty", arrowtail="none"];
"discopy.pivotal.Cup" -> "discopy.rigid.Cup" [arrowhead="empty", arrowtail="none"];
"discopy.pivotal.Diagram" -> "discopy.rigid.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.pivotal.Diagram" -> "discopy.traced.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.pivotal.Functor" -> "discopy.rigid.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.pivotal.Ob" -> "discopy.rigid.Ob" [arrowhead="empty", arrowtail="none"];
"discopy.pivotal.Ty" -> "discopy.rigid.Ty" [arrowhead="empty", arrowtail="none"];
"discopy.python.Dict" -> "discopy.cat.Composable" [arrowhead="empty", arrowtail="none"];
"discopy.python.Dict" -> "discopy.monoidal.Whiskerable" [arrowhead="empty", arrowtail="none"];
"discopy.python.Function" -> "discopy.cat.Composable" [arrowhead="empty", arrowtail="none"];
"discopy.python.Function" -> "discopy.monoidal.Whiskerable" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.channel.Channel" -> "discopy.tensor.Tensor" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.channel.Functor" -> "discopy.tensor.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.circuit.Box" -> "discopy.quantum.circuit.Circuit" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.circuit.Box" -> "discopy.tensor.Box" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.circuit.Circuit" -> "discopy.tensor.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.circuit.Digit" -> "discopy.quantum.circuit.Ob" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.circuit.Functor" -> "discopy.frobenius.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.circuit.Ob" -> "discopy.frobenius.Ob" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.circuit.Qudit" -> "discopy.quantum.circuit.Ob" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.circuit.Sum" -> "discopy.quantum.circuit.Box" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.circuit.Sum" -> "discopy.tensor.Sum" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.circuit.Swap" -> "discopy.quantum.circuit.Box" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.circuit.Swap" -> "discopy.tensor.Swap" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.circuit.Ty" -> "discopy.frobenius.Ty" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.AntiConjugate" -> "discopy.quantum.circuit.Box" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Bra" -> "discopy.quantum.gates.QuantumGate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Bra" -> "discopy.quantum.gates.SelfConjugate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.CRx" -> "discopy.quantum.gates.ControlledRotation" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.CRz" -> "discopy.quantum.gates.ControlledRotation" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.CU1" -> "discopy.quantum.gates.ControlledRotation" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.ClassicalGate" -> "discopy.quantum.gates.SelfConjugate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Controlled" -> "discopy.quantum.gates.QuantumGate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.ControlledRotation" -> "discopy.quantum.gates.Controlled" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.ControlledRotation" -> "discopy.quantum.gates.Rotation" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Copy" -> "discopy.quantum.gates.ClassicalGate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Digits" -> "discopy.quantum.gates.ClassicalGate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Discard" -> "discopy.quantum.gates.SelfConjugate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Encode" -> "discopy.quantum.gates.SelfConjugate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Ket" -> "discopy.quantum.gates.QuantumGate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Ket" -> "discopy.quantum.gates.SelfConjugate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Match" -> "discopy.quantum.gates.ClassicalGate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Measure" -> "discopy.quantum.gates.SelfConjugate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.MixedScalar" -> "discopy.quantum.gates.Scalar" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.MixedState" -> "discopy.quantum.gates.SelfConjugate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Parametrized" -> "discopy.quantum.circuit.Box" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.QuantumGate" -> "discopy.quantum.circuit.Box" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Rotation" -> "discopy.quantum.gates.Parametrized" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Rotation" -> "discopy.quantum.gates.QuantumGate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Rx" -> "discopy.quantum.gates.AntiConjugate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Rx" -> "discopy.quantum.gates.Rotation" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Ry" -> "discopy.quantum.gates.Rotation" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Ry" -> "discopy.quantum.gates.SelfConjugate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Rz" -> "discopy.quantum.gates.AntiConjugate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Rz" -> "discopy.quantum.gates.Rotation" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Scalar" -> "discopy.quantum.gates.Parametrized" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.SelfConjugate" -> "discopy.quantum.circuit.Box" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.Sqrt" -> "discopy.quantum.gates.Scalar" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.U1" -> "discopy.quantum.gates.AntiConjugate" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.gates.U1" -> "discopy.quantum.gates.Rotation" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.zx.Box" -> "discopy.quantum.zx.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.zx.Box" -> "discopy.tensor.Box" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.zx.Diagram" -> "discopy.tensor.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.zx.Scalar" -> "discopy.quantum.zx.Box" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.zx.Spider" -> "discopy.quantum.zx.Box" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.zx.Spider" -> "discopy.tensor.Spider" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.zx.Swap" -> "discopy.quantum.zx.Box" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.zx.Swap" -> "discopy.tensor.Swap" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.zx.X" -> "discopy.quantum.zx.Spider" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.zx.Y" -> "discopy.quantum.zx.Spider" [arrowhead="empty", arrowtail="none"];
"discopy.quantum.zx.Z" -> "discopy.quantum.zx.Spider" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Box" -> "discopy.balanced.Box" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Box" -> "discopy.pivotal.Box" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Box" -> "discopy.ribbon.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Braid" -> "discopy.balanced.Braid" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Braid" -> "discopy.ribbon.Box" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Cap" -> "discopy.pivotal.Cap" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Cap" -> "discopy.ribbon.Box" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Category" -> "discopy.balanced.Category" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Category" -> "discopy.pivotal.Category" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Cup" -> "discopy.pivotal.Cup" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Cup" -> "discopy.ribbon.Box" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Diagram" -> "discopy.balanced.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Diagram" -> "discopy.pivotal.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Diagram.to_ribbons.DualRail" -> "discopy.ribbon.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Functor" -> "discopy.balanced.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Functor" -> "discopy.pivotal.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Twist" -> "discopy.balanced.Twist" [arrowhead="empty", arrowtail="none"];
"discopy.ribbon.Twist" -> "discopy.ribbon.Box" [arrowhead="empty", arrowtail="none"];
"discopy.rigid.Box" -> "discopy.closed.Box" [arrowhead="empty", arrowtail="none"];
"discopy.rigid.Box" -> "discopy.rigid.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.rigid.Cap" -> "discopy.rigid.Box" [arrowhead="empty", arrowtail="none"];
"discopy.rigid.Cap" -> "discopy.utils.BinaryBoxConstructor" [arrowhead="empty", arrowtail="none"];
"discopy.rigid.Category" -> "discopy.cat.Category" [arrowhead="empty", arrowtail="none"];
"discopy.rigid.Cup" -> "discopy.rigid.Box" [arrowhead="empty", arrowtail="none"];
"discopy.rigid.Cup" -> "discopy.utils.BinaryBoxConstructor" [arrowhead="empty", arrowtail="none"];
"discopy.rigid.Diagram" -> "discopy.closed.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.rigid.Functor" -> "discopy.closed.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.rigid.Layer" -> "discopy.monoidal.Layer" [arrowhead="empty", arrowtail="none"];
"discopy.rigid.Ob" -> "discopy.cat.Ob" [arrowhead="empty", arrowtail="none"];
"discopy.rigid.PRO" -> "discopy.monoidal.PRO" [arrowhead="empty", arrowtail="none"];
"discopy.rigid.PRO" -> "discopy.rigid.Ty" [arrowhead="empty", arrowtail="none"];
"discopy.rigid.Sum" -> "discopy.monoidal.Sum" [arrowhead="empty", arrowtail="none"];
"discopy.rigid.Sum" -> "discopy.rigid.Box" [arrowhead="empty", arrowtail="none"];
"discopy.rigid.Ty" -> "discopy.closed.Ty" [arrowhead="empty", arrowtail="none"];
"discopy.symmetric.Box" -> "discopy.braided.Box" [arrowhead="empty", arrowtail="none"];
"discopy.symmetric.Box" -> "discopy.symmetric.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.symmetric.Category" -> "discopy.braided.Category" [arrowhead="empty", arrowtail="none"];
"discopy.symmetric.Diagram" -> "discopy.braided.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.symmetric.Functor" -> "discopy.monoidal.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.symmetric.Hypergraph" -> "discopy.hypergraph.Hypergraph" [arrowhead="empty", arrowtail="none"];
"discopy.symmetric.Swap" -> "discopy.braided.Braid" [arrowhead="empty", arrowtail="none"];
"discopy.symmetric.Swap" -> "discopy.symmetric.Box" [arrowhead="empty", arrowtail="none"];
"discopy.tensor.Box" -> "discopy.frobenius.Box" [arrowhead="empty", arrowtail="none"];
"discopy.tensor.Box" -> "discopy.tensor.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.tensor.Bubble" -> "discopy.monoidal.Bubble" [arrowhead="empty", arrowtail="none"];
"discopy.tensor.Bubble" -> "discopy.tensor.Box" [arrowhead="empty", arrowtail="none"];
"discopy.tensor.Cap" -> "discopy.frobenius.Cap" [arrowhead="empty", arrowtail="none"];
"discopy.tensor.Cap" -> "discopy.tensor.Box" [arrowhead="empty", arrowtail="none"];
"discopy.tensor.Diagram" -> "discopy.frobenius.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.tensor.Functor" -> "discopy.frobenius.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.tensor.Spider" -> "discopy.frobenius.Spider" [arrowhead="empty", arrowtail="none"];
"discopy.tensor.Spider" -> "discopy.tensor.Box" [arrowhead="empty", arrowtail="none"];
"discopy.tensor.Sum" -> "discopy.monoidal.Sum" [arrowhead="empty", arrowtail="none"];
"discopy.tensor.Sum" -> "discopy.tensor.Box" [arrowhead="empty", arrowtail="none"];
"discopy.tensor.Swap" -> "discopy.frobenius.Swap" [arrowhead="empty", arrowtail="none"];
"discopy.tensor.Swap" -> "discopy.tensor.Box" [arrowhead="empty", arrowtail="none"];
"discopy.tensor.Tensor" -> "discopy.matrix.Matrix" [arrowhead="empty", arrowtail="none"];
"discopy.traced.Box" -> "discopy.monoidal.Box" [arrowhead="empty", arrowtail="none"];
"discopy.traced.Box" -> "discopy.traced.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.traced.Category" -> "discopy.monoidal.Category" [arrowhead="empty", arrowtail="none"];
"discopy.traced.Diagram" -> "discopy.monoidal.Diagram" [arrowhead="empty", arrowtail="none"];
"discopy.traced.Functor" -> "discopy.monoidal.Functor" [arrowhead="empty", arrowtail="none"];
"discopy.traced.Trace" -> "discopy.monoidal.Bubble" [arrowhead="empty", arrowtail="none"];
"discopy.traced.Trace" -> "discopy.traced.Box" [arrowhead="empty", arrowtail="none"];
"discopy.utils.NamedGeneric.__class_getitem__.Result.__class_getitem__.C" -> "discopy.utils.NamedGeneric.__class_getitem__.Result" [arrowhead="empty", arrowtail="none"];
"discopy.balanced.Category" -> "discopy.balanced.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.balanced.Category" -> "discopy.balanced.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.balanced.Diagram" -> "discopy.balanced.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ar", style="solid"];
"discopy.braided.Category" -> "discopy.balanced.Diagram.to_braided.DualRail" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.braided.Category" -> "discopy.braided.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.braided.Category" -> "discopy.braided.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.braided.Diagram" -> "discopy.braided.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ar", style="solid"];
"discopy.cartesian.Category" -> "discopy.cartesian.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.cartesian.Category" -> "discopy.cartesian.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.cartesian.Diagram" -> "discopy.cartesian.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ar", style="solid"];
"discopy.cat.Arrow" -> "discopy.cat.Bubble" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="arg", style="solid"];
"discopy.cat.Arrow" -> "discopy.cat.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ar", style="solid"];
"discopy.cat.Arrow" -> "discopy.cat.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ar", style="solid"];
"discopy.cat.Category" -> "discopy.cat.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.cat.Category" -> "discopy.cat.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.cat.Category" -> "discopy.grammar.categorial.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.cat.Category" -> "discopy.grammar.categorial.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.cat.Category" -> "discopy.quantum.channel.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.cat.Category" -> "discopy.quantum.circuit.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.cat.Category" -> "discopy.quantum.circuit.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.cat.Ob" -> "discopy.cat.Arrow" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ty_factory", style="solid"];
"discopy.cat.Ob" -> "discopy.cat.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob", style="solid"];
"discopy.cat.Ob" -> "discopy.monoidal.Ty" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob_factory", style="solid"];
"discopy.closed.Ty" -> "discopy.closed.Diagram" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ty_factory", style="solid"];
"discopy.compact.Category" -> "discopy.compact.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.compact.Category" -> "discopy.compact.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.compact.Category" -> "discopy.compact.Hypergraph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="category", style="solid"];
"discopy.compact.Diagram" -> "discopy.compact.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ar", style="solid"];
"discopy.frobenius.Category" -> "discopy.frobenius.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.frobenius.Category" -> "discopy.frobenius.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.frobenius.Category" -> "discopy.frobenius.Hypergraph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="category", style="solid"];
"discopy.frobenius.Category" -> "discopy.quantum.channel.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.frobenius.Category" -> "discopy.tensor.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.frobenius.Category" -> "discopy.tensor.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.frobenius.Diagram" -> "discopy.frobenius.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ar", style="solid"];
"discopy.frobenius.Dim" -> "discopy.quantum.channel.CQ" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="classical", style="solid"];
"discopy.frobenius.Dim" -> "discopy.quantum.channel.CQ" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="quantum", style="solid"];
"discopy.frobenius.Dim" -> "discopy.tensor.Diagram" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ty_factory", style="solid"];
"discopy.frobenius.Ob" -> "discopy.frobenius.Ty" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob_factory", style="solid"];
"discopy.frobenius.Ty" -> "discopy.frobenius.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob", style="solid"];
"discopy.frobenius.Ty" -> "discopy.frobenius.Diagram" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ty_factory", style="solid"];
"discopy.frobenius.Ty" -> "discopy.frobenius.Spider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="typ", style="solid"];
"discopy.grammar.cfg.Operad" -> "discopy.grammar.cfg.Algebra" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.grammar.cfg.Operad" -> "discopy.grammar.cfg.Algebra" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.grammar.cfg.Tree" -> "discopy.grammar.cfg.Operad" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ar", style="solid"];
"discopy.grammar.pregroup.Category" -> "discopy.grammar.pregroup.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.grammar.pregroup.Category" -> "discopy.grammar.pregroup.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.grammar.pregroup.Diagram" -> "discopy.grammar.pregroup.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ar", style="solid"];
"discopy.grammar.pregroup.Ty" -> "discopy.grammar.pregroup.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob", style="solid"];
"discopy.grammar.pregroup.Ty" -> "discopy.grammar.pregroup.Diagram" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ty_factory", style="solid"];
"discopy.interaction.Ty" -> "discopy.interaction.Diagram" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.interaction.Ty" -> "discopy.interaction.Diagram" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.monoidal.Category" -> "discopy.cat.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.monoidal.Category" -> "discopy.cat.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.monoidal.Category" -> "discopy.hypergraph.Hypergraph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="category", style="solid"];
"discopy.monoidal.Category" -> "discopy.monoidal.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.monoidal.Category" -> "discopy.monoidal.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.monoidal.Diagram" -> "discopy.monoidal.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ar", style="solid"];
"discopy.monoidal.Diagram" -> "discopy.monoidal.Match" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="above", style="solid"];
"discopy.monoidal.Diagram" -> "discopy.monoidal.Match" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="below", style="solid"];
"discopy.monoidal.Layer" -> "discopy.monoidal.Diagram" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="layer_factory", style="solid"];
"discopy.monoidal.Ty" -> "discopy.balanced.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob", style="solid"];
"discopy.monoidal.Ty" -> "discopy.braided.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob", style="solid"];
"discopy.monoidal.Ty" -> "discopy.cartesian.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob", style="solid"];
"discopy.monoidal.Ty" -> "discopy.cat.Arrow" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.monoidal.Ty" -> "discopy.cat.Arrow" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.monoidal.Ty" -> "discopy.cat.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob", style="solid"];
"discopy.monoidal.Ty" -> "discopy.grammar.cfg.Operad" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob", style="solid"];
"discopy.monoidal.Ty" -> "discopy.grammar.cfg.Tree" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ty_factory", style="solid"];
"discopy.monoidal.Ty" -> "discopy.monoidal.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob", style="solid"];
"discopy.monoidal.Ty" -> "discopy.monoidal.Diagram" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ty_factory", style="solid"];
"discopy.monoidal.Ty" -> "discopy.monoidal.Match" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="left", style="solid"];
"discopy.monoidal.Ty" -> "discopy.monoidal.Match" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="right", style="solid"];
"discopy.monoidal.Ty" -> "discopy.symmetric.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob", style="solid"];
"discopy.monoidal.Ty" -> "discopy.traced.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob", style="solid"];
"discopy.pivotal.Category" -> "discopy.pivotal.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.pivotal.Category" -> "discopy.pivotal.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.pivotal.Diagram" -> "discopy.pivotal.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ar", style="solid"];
"discopy.pivotal.Ob" -> "discopy.pivotal.Ty" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob_factory", style="solid"];
"discopy.pivotal.Ty" -> "discopy.compact.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob", style="solid"];
"discopy.pivotal.Ty" -> "discopy.compact.Diagram" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ty_factory", style="solid"];
"discopy.pivotal.Ty" -> "discopy.interaction.Ty" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="natural", style="solid"];
"discopy.pivotal.Ty" -> "discopy.interaction.Ty" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="positive", style="solid"];
"discopy.pivotal.Ty" -> "discopy.interaction.Ty" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="negative", style="solid"];
"discopy.pivotal.Ty" -> "discopy.pivotal.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob", style="solid"];
"discopy.pivotal.Ty" -> "discopy.pivotal.Diagram" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ty_factory", style="solid"];
"discopy.pivotal.Ty" -> "discopy.ribbon.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob", style="solid"];
"discopy.quantum.circuit.Ob" -> "discopy.quantum.circuit.Ty" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob_factory", style="solid"];
"discopy.quantum.circuit.Ty" -> "discopy.quantum.circuit.Circuit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ty_factory", style="solid"];
"discopy.quantum.gates.Rx" -> "discopy.quantum.gates.CRx" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="controlled", style="solid"];
"discopy.quantum.gates.Rz" -> "discopy.quantum.gates.CRz" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="controlled", style="solid"];
"discopy.quantum.gates.U1" -> "discopy.quantum.gates.CU1" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="controlled", style="solid"];
"discopy.ribbon.Category" -> "discopy.ribbon.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.ribbon.Category" -> "discopy.ribbon.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.ribbon.Diagram" -> "discopy.interaction.Diagram" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="natural", style="solid"];
"discopy.ribbon.Diagram" -> "discopy.interaction.Diagram" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inside", style="solid"];
"discopy.ribbon.Diagram" -> "discopy.ribbon.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ar", style="solid"];
"discopy.rigid.Category" -> "discopy.rigid.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.rigid.Category" -> "discopy.rigid.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.rigid.Diagram" -> "discopy.rigid.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ar", style="solid"];
"discopy.rigid.Layer" -> "discopy.rigid.Diagram" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="layer_factory", style="solid"];
"discopy.rigid.Ob" -> "discopy.rigid.Ty" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob_factory", style="solid"];
"discopy.rigid.PRO" -> "discopy.quantum.zx.Diagram" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ty_factory", style="solid"];
"discopy.rigid.Ty" -> "discopy.rigid.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ob", style="solid"];
"discopy.rigid.Ty" -> "discopy.rigid.Diagram" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ty_factory", style="solid"];
"discopy.symmetric.Category" -> "discopy.symmetric.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.symmetric.Category" -> "discopy.symmetric.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.symmetric.Category" -> "discopy.symmetric.Hypergraph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="category", style="solid"];
"discopy.symmetric.Diagram" -> "discopy.symmetric.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ar", style="solid"];
"discopy.traced.Category" -> "discopy.traced.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dom", style="solid"];
"discopy.traced.Category" -> "discopy.traced.Functor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cod", style="solid"];
"discopy.traced.Diagram" -> "discopy.traced.Category" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ar", style="solid"];
}
